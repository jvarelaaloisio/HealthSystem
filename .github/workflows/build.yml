name: Build and Release

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  Build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1
      
    - name: Cache NuGet packages
      uses: actions/cache@v3.3.2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Restore NuGet packages
      run: nuget restore Projects/LS/LS.sln

    - name: Build
      run: msbuild /p:Configuration=Release Projects/LS/LS.sln

  Test:
    needs: [Build]
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1
    - name: Run Tests
      run: |
        nuget install NUnit.ConsoleRunner -Version 3.11.1
        ./NUnit.ConsoleRunner.3.11.1/tools/nunit3-console.exe Projects/LS/LS.UnitTests/bin/Release/LS.UnitTests.dll
        
  Release:
    needs: [Build, Test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1

    - name: Print Tag
      run: echo ${Releasing Tag {env.CURRENT_TAG }}
      
    - name: Create or Update Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        tag_name: ${{ env.CURRENT_TAG }}
        release_name: Release ${{ env.CURRENT_TAG }}
        draft: false
        prerelease: false

    - name: Upload .dll file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: Projects/LS/LS/bin/Release/LS.dll
        asset_name: LS.dll
        asset_content_type: application/octet-stream